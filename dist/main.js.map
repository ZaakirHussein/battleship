{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;AAAiC;;AAEjC;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc;AAClC,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,QAAQ,oDAAI;AACZ,QAAQ,oDAAI;AACZ,QAAQ,oDAAI;AACZ,QAAQ,oDAAI;AACZ,QAAQ,oDAAI;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,mBAAmB;AACnE;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;;AAErB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA,sBAAsB,wBAAwB;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;AC7QkB;;AAE3C;AACA,kBAAkB,yDAAS;AAC3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;ACpE7B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;ACrDwD;AAChC;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B,uEAAe;AAC7C;AACA;AACA;AACA;AACA;AACA,IAAI,yEAAiB;AACrB;AACA;AACA;AACA;AACA;AACA,IAAI,yEAAiB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,IAAI,+DAAO;AACX;AACA;AACA;AACA,IAAI,+DAAO;AACX;AACA;AACA;AACA;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;AC9D+B;AACG;AACX;;AAE/C;AACA;AACA,EAAE,uEAAkB;AACpB;AACA,EAAE,qEAAa;AACf,EAAE,2DAAc;AAChB;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;ACZ1B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAE2C;;;;;;;;;;;;;;;;;;;;ACbW;AACK;AACf;AACU;AACA;;AAEtD;AACA,qBAAqB,gEAAa,CAAC,oEAAW;AAC9C,uBAAuB,gEAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,oEAAmB,CAAC,oEAAW;AACjC,EAAE,0DAAa;AACf,EAAE,kEAAiB;AACnB;;AAEA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;;ACtBwB;;AAEtD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,EAAE,kEAAiB;AACnB;;AAEA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;;;;;ACtBkC;AACc;AACD;AACE;;AAE9E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,6EAAU;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC,6EAAU;AAClD,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sFAAW,EAAE;;AAE3C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE,mEAAW;;AAEb;AACA,EAAE,8EAAsB;AACxB;;AAEuE;;;;;;;;;;;;;;;;;;;;;;;;;AC/GzB;AACV;;AAEpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,iDAAW;;AAEf;AACA,IAAI,gEAAQ;AACZ,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,mCAAmC,uBAAuB,GAAG,oBAAoB;AACjF;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC,4DAA4D,OAAO;AACnE,wCAAwC,sBAAsB;AAC9D;AACA,SAAS;AACT;AACA;AACA,IAAI;AACJ,oCAAoC,WAAW;AAC/C,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,mCAAmC,uBAAuB,UAAU;AACpE;AACA,oBAAoB,GAAG,oBAAoB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC,wDAAwD,OAAO;AAC/D,oCAAoC,mBAAmB;AACvD;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,+CAA+C,iBAAiB;AAChE,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAYE;;;;;;;UC9KF;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNwC;;AAExC,qDAAW","sources":["webpack://battleship/./src/components/factories/gameBoardFactory.js","webpack://battleship/./src/components/factories/playerFactory.js","webpack://battleship/./src/components/factories/shipFactory.js","webpack://battleship/./src/components/gameFlow.js","webpack://battleship/./src/components/helpers/handleForm.js","webpack://battleship/./src/components/helpers/retrievePlayerName.js","webpack://battleship/./src/components/initializeGame.js","webpack://battleship/./src/components/positionShips.js","webpack://battleship/./src/dom/dom.js","webpack://battleship/./src/dom/domHelpers.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["import Ship from \"./shipFactory\";\n\nfunction Gameboard() {\n  const createBoard = () => {\n    const x = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n    const y = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"];\n    let board = [];\n\n    for (let i = 0; i < x.length; i++) {\n      for (let j = 0; j < y.length; j++) {\n        board.push({\n          ID: x[i] + y[j],\n          ship: null,\n          status: null,\n          attackedBy: null,\n          sunk: false,\n        });\n      }\n    }\n\n    return board;\n  };\n\n  const boardPieces = createBoard();\n\n  const shipStorage = [\n    new Ship(\"Carrier\", 5),\n    new Ship(\"Battleship\", 4),\n    new Ship(\"Cruiser\", 3),\n    new Ship(\"Submarine\", 3),\n    new Ship(\"Destroyer\", 2),\n  ];\n\n  const positionUserShips = () => {\n    const listOfShips = getShipStorage();\n    const cssShips = [\n      \"carrier\",\n      \"battleship\",\n      \"cruiser\",\n      \"submarine\",\n      \"destroyer\",\n    ];\n    const positionShipContainer = document.querySelector(\".grid-container\");\n\n    listOfShips.map((ship) => {\n      cssShips.map((cssShip) => {\n        positionShipContainer.addEventListener(\"mouseover\", function (e) {\n          document.createElement(\"div\").classList.add(cssShip);\n          console.log(e.target.dataset.info);\n        });\n      });\n    });\n  };\n\n  const setShipCoordinates = (name, inputCoordinates) => {\n    for (const ship of shipStorage) {\n      if (ship.shipType === name) {\n        ship.coordinates = inputCoordinates;\n      }\n    }\n    addShipToBoardProp(name, inputCoordinates);\n  };\n\n  const addShipToBoardProp = (name, submittedCoordinates) => {\n    // loop through array of board pieces ex. [{ID: A1, ship: null}, ...]\n    // if boardPiece.ID matches inputed coordinates\n    // set boardPiece.ship property to activeShip object\n\n    const approvedBoardPieces = submittedCoordinates.map(\n      (indivdiualCoordinate) => {\n        const matchingBoardPieces = boardPieces.find((boardPiece) => {\n          return boardPiece.ID === indivdiualCoordinate;\n        });\n\n        return matchingBoardPieces;\n      }\n    );\n\n    // Sets the active ship's coordindate property to the inputed coordinates\n    const activeShip = shipStorage.find((ship) => ship.shipType === name);\n\n    for (const boardPiece of approvedBoardPieces) {\n      boardPiece.ship = activeShip;\n    }\n  };\n\n  const hitActiveShip = (shipName, inputtedCoordinates) => {\n    for (const shipObj of shipStorage) {\n      if (shipObj.shipType === shipName) {\n        shipObj.hit(inputtedCoordinates);\n      }\n    }\n  };\n\n  const recordOfAttack = (attacker, coordinates, hitStatus) => {\n    const attackerStorage = attacker.moves;\n    const movObj = { attackCoordinates: coordinates, DidItHit: hitStatus };\n\n    attackerStorage.push(movObj);\n  };\n\n  const receiveAttack = (coordinates, attacker) => {\n    const activeBoardPiece = boardPieces.find(\n      (boardPiece) => boardPiece.ID === coordinates\n    );\n\n    if (activeBoardPiece.status !== null) return;\n\n    if (activeBoardPiece.ship !== null) {\n      activeBoardPiece.status = \"hit\";\n      activeBoardPiece.attackedBy = attacker.getName();\n\n      let shipID = activeBoardPiece.ship.shipType;\n      hitActiveShip(shipID, coordinates);\n      recordOfAttack(attacker, coordinates, activeBoardPiece.status);\n    } else {\n      activeBoardPiece.status = \"missed\";\n      activeBoardPiece.attackedBy = attacker.getName();\n      recordOfAttack(attacker, coordinates, activeBoardPiece.status);\n    }\n  };\n\n  const setShipSunkBoardProp = () => {\n    const sunkShips = [];\n\n    for (const ship of shipStorage) {\n      if (ship.getSunkStatus() == true) {\n        sunkShips.push(ship);\n\n        // Here find the sunk ship's coordinates and update the board pieces that contain the sunk ship\n        sunkShips.forEach((sunkShip) => {\n          const approvedBoardPieces = sunkShip.coordinates.map(\n            (indivdiualCoordinate) => {\n              const matchingBoardPieces = boardPieces.find((boardPiece) => {\n                return boardPiece.ID === indivdiualCoordinate;\n              });\n\n              return matchingBoardPieces;\n            }\n          );\n\n          for (const boardPiece of approvedBoardPieces) {\n            boardPiece.sunk = sunkShip.getSunkStatus();\n          }\n        });\n      }\n    }\n  };\n\n  const renderBoard = (container, user, mode) => {\n    if (user === true) {\n      const grid = container.appendChild(document.createElement(\"div\"));\n      if (mode === \"position\") {\n        grid.classList.add(\"grid-position\");\n      } else {\n        grid.classList.add(\"grid\");\n      }\n\n      for (let i = 0; i < 100; i++) {\n        let cell = grid.appendChild(document.createElement(\"div\"));\n        cell.classList.add(\"grid-box\");\n        cell.dataset.info = JSON.stringify(boardPieces[i]);\n        let cellData = boardPieces[i];\n        let cellShipData = cellData.ship;\n        let cellHitData = cellData.status;\n        let cellSunkStatus = cellData.sunk;\n\n        if (cellShipData !== null) {\n          cell.classList.toggle(\"box-ship-placed\");\n        }\n\n        if (cellSunkStatus === true) {\n          cell.classList.toggle(\"box-sunk\");\n        }\n\n        switch (cellHitData) {\n          case \"hit\":\n            // toggle a class\n            cell.classList.toggle(\"box-hit\");\n            cell.textContent = \"X\";\n            break;\n          case \"missed\":\n            // toggle a class\n            cell.classList.toggle(\"box-missed\");\n            cell.textContent = \"O\";\n            break;\n        }\n      }\n    } else {\n      const computerGrid = container.appendChild(document.createElement(\"div\"));\n      computerGrid.classList.add(\"computer-grid\");\n\n      for (let i = 0; i < boardPieces.length; i++) {\n        let compCell = computerGrid.appendChild(document.createElement(\"div\"));\n        compCell.classList.add(\"grid-box-computer\");\n        compCell.dataset.info = boardPieces[i].ID;\n        const compCellData = boardPieces[i];\n        const cellStatus = compCellData.status;\n        let cellSunkStatus = compCellData.sunk;\n\n        console.log(cellSunkStatus);\n\n        if (cellSunkStatus == true) {\n          compCell.classList.toggle(\"box-sunk\");\n        }\n\n        switch (cellStatus) {\n          case \"hit\":\n            // toggle a class/add class\n            compCell.classList.toggle(\"box-hit\");\n            compCell.textContent = \"X\";\n            break;\n          case \"missed\":\n            compCell.classList.toggle(\"box-missed\");\n            compCell.textContent = \"O\";\n            break;\n        }\n      }\n    }\n  };\n\n  const getCompCells = () => {\n    return document.querySelectorAll(\".grid-box-computer\");\n  };\n\n  const getBoardPieces = () => {\n    return boardPieces;\n  };\n  const getShipStorage = () => {\n    return shipStorage;\n  };\n\n  const getFleetHealth = () => {\n    const ships = getShipStorage();\n\n    const carrierHealth = ships[0].getHealth();\n    const battleshipHealth = ships[1].getHealth();\n    const cruiserHealth = ships[2].getHealth();\n    const submarineHealth = ships[3].getHealth();\n    const destroyerHealth = ships[4].getHealth();\n    return {\n      carrierHealth,\n      battleshipHealth,\n      cruiserHealth,\n      submarineHealth,\n      destroyerHealth,\n    };\n  };\n\n  const areAllShipsSunk = () => {\n    const ships = getShipStorage();\n    let result = ships.map((ship) => ship.isSunk());\n    return result.every((element) => element === true);\n  };\n\n  return {\n    setShipCoordinates,\n    setShipSunkBoardProp,\n    getCompCells,\n    getBoardPieces,\n    getShipStorage,\n    getFleetHealth,\n    areAllShipsSunk,\n    positionUserShips,\n    receiveAttack,\n    renderBoard,\n  };\n}\n\nexport default Gameboard;\n","import Gameboard from \"./gameBoardFactory\";\n\nfunction PlayerFactory(name, checkTurn) {\n  let board = new Gameboard();\n  let turn = checkTurn;\n  let moves = [];\n  let fleetHealth = board.getFleetHealth();\n\n  const getName = () => {\n    return name;\n  };\n\n  const getPlayerBoard = () => {\n    return board;\n  };\n\n  const getTurnStatus = () => {\n    return turn;\n  };\n\n  const changeTurn = () => {\n    turn = !turn;\n  };\n\n  const getAttackCoord = () => {\n    if (!moves.length) return;\n\n    let output = [];\n    for (let move of moves) {\n      output.push(move.attackCoordinates);\n    }\n    return output;\n  };\n\n  const getMoves = () => {\n    return moves;\n  };\n\n  const randomShipPlacement = (player) => {\n    const playerBoardObj = player.board;\n    const playerBoardAccess = playerBoardObj.getBoardPieces();\n\n    const fiveCoordinates = [];\n\n    for (let i = 0; i < 5; i++) {\n      const randomBoardPiece =\n        playerBoardAccess[Math.floor(Math.random() * playerBoardAccess.length)];\n      fiveCoordinates.push(randomBoardPiece.ID);\n    }\n\n    return fiveCoordinates;\n  };\n\n  return {\n    turn,\n    moves,\n    fleetHealth,\n    board,\n    changeTurn,\n    getName,\n    getTurnStatus,\n    getPlayerBoard,\n    getAttackCoord,\n    getMoves,\n    randomShipPlacement,\n  };\n}\n\nexport default PlayerFactory;\n","function Ship(name, length, coordinates = []) {\n  const shipType = name;\n  let health = length;\n  const hitMarkers = [];\n  let sunk = false;\n\n  //setCoordinates\n  const shipCoordinates = coordinates;\n\n  const hit = () => {\n    if (health >= 1) {\n      health--;\n      hitMarkers.push(\"hit\");\n    }\n  };\n\n  const isSunk = () => {\n    if (health === 0) {\n      sunk = true;\n      return true;\n    } else return false;\n  };\n\n  const getShipCoordinates = () => {\n    return coordinates;\n  };\n\n  const getHealth = () => {\n    return health;\n  };\n  const getHitmarkers = () => {\n    return hitMarkers;\n  };\n\n  const getSunkStatus = () => {\n    return sunk;\n  };\n\n  return {\n    shipType,\n    length,\n    coordinates,\n    sunk,\n    health,\n    hit,\n    isSunk,\n    getShipCoordinates,\n    getHealth,\n    getHitmarkers,\n    getSunkStatus,\n  };\n}\n\nexport default Ship;\n","import { updateGameDisplay, retrieveClicked } from \"/src/dom/domHelpers.js\";\nimport { turnMsg } from \"../dom/domHelpers\";\n\nconst gameFlow = async (player, computer) => {\n  const playerBoard = player.getPlayerBoard();\n  const computerBoard = computer.getPlayerBoard();\n\n  while (\n    playerBoard.areAllShipsSunk() == false &&\n    computerBoard.areAllShipsSunk() == false\n  ) {\n    const coordinates = await retrieveClicked();\n    computerBoard.receiveAttack(coordinates, player);\n    player.changeTurn();\n    computer.changeTurn();\n    playerBoard.setShipSunkBoardProp();\n    computerBoard.setShipSunkBoardProp();\n    updateGameDisplay(player, computer);\n    computerPlay(player, computer);\n    computer.changeTurn();\n    player.changeTurn();\n    computerBoard.setShipSunkBoardProp();\n    playerBoard.setShipSunkBoardProp();\n    updateGameDisplay(player, computer);\n\n    continue;\n  }\n  endGame(playerBoard, computerBoard);\n};\n\nconst computerPlay = (humanPlayer, computer) => {\n  const humanBoardObj = humanPlayer.board;\n  const humanBoardAccess = humanBoardObj.getBoardPieces();\n\n  const eligibleBoard = humanBoardAccess.filter(\n    (boardPiece) => boardPiece.status === null\n  );\n\n  const computerAttack = (coordinates) => {\n    humanBoardObj.receiveAttack(coordinates, computer);\n  };\n\n  const generateRandomCoord = (() => {\n    const randomBoardPiece =\n      eligibleBoard[Math.floor(Math.random() * eligibleBoard.length)];\n    const randomBoardPiecesCoord = randomBoardPiece.ID;\n    computerAttack(randomBoardPiecesCoord);\n  })();\n};\n\nconst endGame = (playerBoard, computerBoard) => {\n  if (computerBoard.areAllShipsSunk() === true) {\n    turnMsg(\"Congrats, you beat the computer!\");\n    return true;\n  }\n  if (playerBoard.areAllShipsSunk() === true) {\n    turnMsg(\"Unfortunately you have lost to the computer!\");\n    return true;\n  }\n  return false;\n};\n\nexport default gameFlow;\n","import { removeContent } from \"/src/dom/domHelpers.js\";\nimport { retrievePlayerName } from \"./retrievePlayerName\";\nimport initializeGame from \"../initializeGame\";\n\nconst handleForm = (e) => {\n  e.preventDefault();\n  retrievePlayerName();\n  const homeDisplayContainer = document.querySelector(\".home-display\");\n  removeContent(homeDisplayContainer);\n  initializeGame();\n};\n\nexport default handleForm;\n","let nameStorage;\n\nconst retrievePlayerName = () => {\n  let playerName = document.getElementById(\"player-input\").value;\n  nameStorage = playerName;\n\n  if (playerName === \"\") {\n    console.log(\"You did not enter a value.\");\n  }\n  console.log(playerName);\n  return playerName;\n};\n\nexport { retrievePlayerName, nameStorage };\n","import PlayerFactory from \"./factories/playerFactory\";\nimport { nameStorage } from \"./helpers/retrievePlayerName\";\nimport positionShips from \"./positionShips\";\nimport { startGameListener } from \"../dom/domHelpers\";\nimport { positionShipDisplay } from \"/src/dom/dom.js\";\n\nconst initializeGame = () => {\n  const player = new PlayerFactory(nameStorage, true);\n  const computer = new PlayerFactory(\"AI\", false);\n  const computerBoard = computer.getPlayerBoard();\n  // create function taht randomly assigns computer board coordinates\n  computerBoard.setShipCoordinates(\"Carrier\", [\"A1\", \"B1\", \"C1\", \"D1\", \"E1\"]);\n  computerBoard.setShipCoordinates(\"Battleship\", [\"A3\", \"B3\", \"C3\", \"D3\"]);\n  computerBoard.setShipCoordinates(\"Cruiser\", [\"C5\", \"D5\", \"E5\"]);\n  computerBoard.setShipCoordinates(\"Submarine\", [\"B7\", \"C7\", \"D7\"]);\n  computerBoard.setShipCoordinates(\"Destroyer\", [\"C10\", \"D10\"]);\n\n  positionShipDisplay(nameStorage);\n  positionShips(player, computer);\n  startGameListener(player, computer);\n};\n\nexport default initializeGame;\n","import { createListOfShips } from \"../dom/domHelpers\";\n\nconst positionShips = (player) => {\n  const playerBoard = player.getPlayerBoard();\n\n  // function that allows user to place ships with drag and drop\n  playerBoard.setShipCoordinates(\"Carrier\", [\"A1\", \"A2\", \"A3\", \"A4\", \"A5\"]);\n  playerBoard.setShipCoordinates(\"Battleship\", [\"B1\", \"B2\", \"B3\", \"B4\"]);\n  playerBoard.setShipCoordinates(\"Cruiser\", [\"D3\", \"D4\", \"D5\"]);\n  playerBoard.setShipCoordinates(\"Submarine\", [\"F1\", \"F2\", \"F3\"]);\n  playerBoard.setShipCoordinates(\"Destroyer\", [\"J4\", \"J5\"]);\n\n  playerBoard.positionUserShips();\n\n  const positionShipContainer = document.querySelector(\".grid-container\");\n  playerBoard.renderBoard(positionShipContainer, true, \"position\");\n\n  const placeShipContent = document.querySelector(\".place-ship\");\n\n  createListOfShips(placeShipContent, player);\n};\n\nexport default positionShips;\n","import handleForm from \"/src/components/helpers/handleForm.js\";\nimport { displayFleetsAndBoards, turnDisplay } from \"/src/dom/domHelpers.js\";\nimport { nameStorage } from \"/src/components/helpers/retrievePlayerName.js\";\nimport { retrievePlayerName } from \"../components/helpers/retrievePlayerName\";\n\nconst createHeader = () => {\n  const headerContainer = document.body.appendChild(\n    document.createElement(\"nav\")\n  );\n  headerContainer.classList.add(\"header-container-game\");\n\n  const headerLogo = headerContainer.appendChild(document.createElement(\"img\"));\n  headerLogo.classList.add(\"header-logo-game\");\n  headerLogo.src = \"/src/styles/images/Battleship-1.png\";\n};\n\nconst homeDisplay = () => {\n  const createHome = document.body.appendChild(document.createElement(\"div\"));\n  createHome.classList.add(\"home-display\");\n\n  const addToHomeDisplay = document.querySelector(\".home-display\");\n\n  const headerContainer = addToHomeDisplay.appendChild(\n    document.createElement(\"nav\")\n  );\n  headerContainer.classList.add(\"navbar\");\n\n  const headerLogo = headerContainer.appendChild(document.createElement(\"img\"));\n  headerLogo.classList.add(\"header-logo\");\n  headerLogo.src = \"/src/styles/images/Battleship-1.png\";\n\n  const homeContainer = addToHomeDisplay.appendChild(\n    document.createElement(\"section\")\n  );\n  homeContainer.classList.add(\"home-container\");\n\n  const createEnterNameInput = (() => {\n    const enterNameContainer = homeContainer.appendChild(\n      document.createElement(\"div\")\n    );\n    enterNameContainer.classList.add(\"enter-name-container\");\n\n    const form = enterNameContainer.appendChild(document.createElement(\"form\"));\n    form.classList.add(\"form\");\n    form.addEventListener(\"submit\", handleForm);\n\n    const input = form.appendChild(document.createElement(\"input\"));\n    input.classList.add(\"input\");\n    input.placeholder = \"PLAYER NAME\";\n    input.setAttribute(\"id\", \"player-input\");\n    input.setAttribute(\"name\", \"player-input\");\n    input.setAttribute(\"type\", \"text\");\n    input.required = true;\n\n    const startBtn = form.appendChild(document.createElement(\"button\"));\n    startBtn.textContent = \"Start Game\";\n    startBtn.classList.add(\"start-btn\");\n    startBtn.setAttribute(\"type\", \"submit\");\n    startBtn.addEventListener(\"submit\", handleForm);\n  })();\n};\n\nconst positionShipDisplay = () => {\n  createHeader();\n\n  const placeShip = document.body.appendChild(document.createElement(\"div\"));\n  placeShip.classList.add(\"place-ship-container\");\n\n  const headerContainer = placeShip.appendChild(\n    document.createElement(\"header\")\n  );\n  headerContainer.classList.add(\"place-ship-header\");\n  const headerText = headerContainer.appendChild(document.createElement(\"h1\"));\n  headerText.textContent = `${nameStorage} place your ships!`;\n\n  const placeShipContent = placeShip.appendChild(\n    document.createElement(\"main\")\n  );\n  placeShipContent.classList.add(\"place-ship\");\n\n  const gridContainer = placeShipContent.appendChild(\n    document.createElement(\"section\")\n  );\n\n  gridContainer.classList.add(\"grid-container\");\n\n  const startGameBtn = placeShipContent.appendChild(\n    document.createElement(\"button\")\n  );\n\n  startGameBtn.classList.add(\"ready-btn\");\n  startGameBtn.textContent = \"I'm Ready\";\n};\n\nconst gameDisplay = (player, computer) => {\n  const turnContainer = document.body.appendChild(\n    document.createElement(\"div\")\n  );\n  turnContainer.classList.add(\"turn-container\");\n  const gameContainer = document.body.appendChild(\n    document.createElement(\"div\")\n  );\n  gameContainer.classList.add(\"game-container\");\n\n  // Display who's turn it is\n  turnDisplay(player, computer);\n\n  // Renders Player and Computer's gameboard and fleet\n  displayFleetsAndBoards(player, computer);\n};\n\nexport { createHeader, homeDisplay, positionShipDisplay, gameDisplay };\n","import gameFlow from \"../components/gameFlow\";\nimport { gameDisplay } from \"./dom\";\n\nconst startGameListener = (player, computer) => {\n  // assigning event listener to start game\n  const ListenerBtn = document.querySelector(\".ready-btn\");\n  const placeShipDisplay = document.querySelector(\".place-ship-container\");\n  const startGameBtn = document.querySelector(\".ready-btn\");\n\n  startGameBtn.addEventListener(\"click\", function () {\n    // removes position display and repopulates with game display\n    removeContent(placeShipDisplay);\n    gameDisplay(player, computer);\n\n    // starts game flow\n    gameFlow(player, computer);\n  });\n};\n\nconst createListOfShips = (container, player) => {\n  const listContainer = container.appendChild(document.createElement(\"div\"));\n  listContainer.classList.add(\"list-container\");\n  const shipListHeader = listContainer.appendChild(\n    document.createElement(\"h2\")\n  );\n\n  const listOfShips = listContainer.appendChild(document.createElement(\"ul\"));\n  listOfShips.classList.add(\"ships-list\");\n\n  const playerName = player.getName();\n  const playerBoard = player.getPlayerBoard();\n  const fleetInfo = playerBoard.getShipStorage();\n\n  if (playerName === \"AI\") {\n    shipListHeader.textContent = \"Computer's Fleet\";\n    for (let i = 0; i < 5; i++) {\n      const shipDisplay = document.createElement(\"li\");\n      listOfShips.appendChild(shipDisplay);\n      shipDisplay.classList.add(\"individual-ships\");\n      shipDisplay.textContent = `${fleetInfo[i].shipType} (${fleetInfo[i].length})`;\n      shipDisplay.setAttribute(\"id\", \"ship\" + [i + 6]);\n      if (fleetInfo[i].isSunk()) {\n        // let sunkShip = fleetInfo[i];\n        let sunkId = [i + 6];\n        const editShipDisplay = (() => {\n          let stringId = `ship${sunkId}`;\n          let editThisShip = document.getElementById(`ship${sunkId}`);\n          editThisShip.textContent = `${fleetInfo[i].shipType}'s sunk!`;\n          editThisShip.classList.toggle(\"sunk-ship-list\");\n        })();\n      }\n    }\n  } else {\n    shipListHeader.textContent = `${playerName}'s Fleet`;\n    for (let i = 0; i < 5; i++) {\n      const shipDisplay = document.createElement(\"li\");\n      listOfShips.appendChild(shipDisplay);\n      shipDisplay.classList.add(\"individual-ships\");\n      shipDisplay.textContent = `${fleetInfo[i].shipType} Health: ${fleetInfo[\n        i\n      ].getHealth()}/${fleetInfo[i].length}`;\n      shipDisplay.setAttribute(\"id\", \"ship\" + [i + 1]);\n    }\n  }\n};\n\nconst sunkShipDisplay = (fleet) => {\n  if (fleet[i].isSunk()) {\n    // let sunkShip = fleet[i];\n    let sunkId = [i + 1];\n    const editShipDisplay = (() => {\n      let stringId = `ship${sunkId}`;\n      let editThisShip = document.getElementById(`ship${sunkId}`);\n      editThisShip.textContent = `${fleet[i].shipType} has been sunk!`;\n      console.log(stringId);\n    })();\n  }\n};\n\nconst displayFleetsAndBoards = (player, computer) => {\n  const gameContainer = document.querySelector(\".game-container\");\n\n  while (gameContainer.hasChildNodes()) {\n    gameContainer.firstChild.remove();\n  }\n\n  const leftGame = gameContainer.appendChild(document.createElement(\"div\"));\n  leftGame.classList.add(\"left-game\");\n  const playerFleetDisplay = createListOfShips(leftGame, player);\n  const playerBoard = player.getPlayerBoard();\n  playerBoard.renderBoard(leftGame, true);\n\n  const rightGame = gameContainer.appendChild(document.createElement(\"div\"));\n  rightGame.classList.add(\"right-game\");\n  const computerBoard = computer.getPlayerBoard();\n  computerBoard.renderBoard(rightGame);\n  const computerFleetDisplay = createListOfShips(rightGame, computer);\n};\n\nconst retrieveClicked = () => {\n  return new Promise((resolve) => {\n    let computerCells = document.querySelectorAll(\".grid-box-computer\");\n    computerCells.forEach((cell) =>\n      cell.addEventListener(\"click\", function (e) {\n        resolve(e.target.dataset.info);\n      })\n    );\n  });\n};\n\nconst displaySunkShips = (playerBoard, computerBoard) => {\n  const playerFleet = playerBoard.getFleetHealth();\n  const compFleet = computerBoard.getFleetHealth();\n\n  const playerBoardPieces = playerBoard.getBoardPieces();\n  const compBoardPieces = computerBoard.getBoardPieces();\n\n  playerFleet.map((ship) => {\n    if (ship === 0) {\n    }\n  });\n\n  const sunkPlayer = [];\n  const sunkComp = [];\n};\n\nconst turnDisplay = (player, computer) => {\n  const container = document.querySelector(\".turn-container\");\n\n  while (container.hasChildNodes()) {\n    container.firstChild.remove();\n  }\n\n  const turnTitle = container.appendChild(document.createElement(\"h2\"));\n  turnTitle.classList.add(\"turn-title\");\n\n  const playerTurn = player.getTurnStatus();\n  const computerTurn = computer.getTurnStatus();\n\n  if (playerTurn === true) {\n    turnTitle.textContent = `It's  your turn ${player.getName()}, attack the computer's board!`;\n  } else if (computerTurn === true) {\n    turnTitle.textContent = `It's the computer's turn, brace for impact!`;\n  }\n};\n\nconst turnMsg = (string) => {\n  const turnText = document.querySelector(\".turn-title\");\n  turnText.textContent = string;\n};\n\nconst updateGameDisplay = (player, computer) => {\n  turnDisplay(player, computer);\n  displayFleetsAndBoards(player, computer);\n};\n\nconst pageTranstion = (content) => {\n  removeContent(content);\n};\n\nconst removeContent = (content) => {\n  content.remove();\n};\n\nexport {\n  startGameListener,\n  updateGameDisplay,\n  turnDisplay,\n  turnMsg,\n  displayFleetsAndBoards,\n  retrieveClicked,\n  createListOfShips,\n  pageTranstion,\n  removeContent,\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { homeDisplay } from \"./dom/dom\";\n\nhomeDisplay();\n"],"names":[],"sourceRoot":""}