{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;AAAiC;;AAEjC;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc;AAClC,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,QAAQ,oDAAI;AACZ,QAAQ,oDAAI;AACZ,QAAQ,oDAAI;AACZ,QAAQ,oDAAI;AACZ,QAAQ,oDAAI;AACZ;;AAEA;AACA,yBAAyB,MAAM,cAAc,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,mBAAmB;AACnE;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;;AAErB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,0CAA0C,yBAAyB;AACnE,sCAAsC,gBAAgB,EAAE,sBAAsB;AAC9E;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oDAAoD,iBAAiB;AACrE,sCAAsC,qBAAqB,EAAE,EAAE;AAC/D;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA,aAAa,mBAAmB;AAChC;AACA,WAAW;AACX;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA,sBAAsB,SAAS;AAC/B;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,2BAA2B;AAC9D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA,sBAAsB,wBAAwB;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;AC7aK;;AAE9B;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,mEAAkB;AAClD;AACA;AACA;AACA,MAAM,kEAAiB;AACvB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,kEAAiB;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,wDAAO;AACb;AACA;AACA;AACA,MAAM,wDAAO;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kBAAkB,IAAI,wBAAwB;AACjE,mBAAmB,kBAAkB,IAAI,wBAAwB;AACjE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,WAAW;AACX;;AAEA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;ACtFuB;;AAE3C;AACA,kBAAkB,yDAAS;AAC3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;ACpD7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;AC5EuB;AACC;;AAE5C;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,8DAAI;;AAEvB;AACA;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;ACfxB;AACA;AACA;AACA,iEAAe,qBAAqB,EAAC;;;;;;;;;;;;;;;;;;ACHgB;AACK;AACX;;AAE/C;AACA;AACA,EAAE,uEAAkB;AACpB;AACA,EAAE,8DAAa;AACf,EAAE,2DAAc;AAChB;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;ACZ1B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAE2C;;;;;;;;;;;;;;;;;;;ACbW;AACK;AACf;AACK;;AAEjD;AACA,qBAAqB,gEAAa,CAAC,oEAAW;AAC9C,uBAAuB,gEAAa;AACpC;AACA;;AAEA,EAAE,6DAAmB,CAAC,oEAAW;AACjC,EAAE,0DAAa;AACf;;AAEA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;;ACXH;;AAE3B;AACA;AACA;AACA;;AAEA;AACA,IAAI,mEAAkB;AACtB,IAAI,iEAAgB;AACpB,GAAG;;AAEH,EAAE,sEAAqB;AACvB;;AAEA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;;;;;ACnBsC;AACT;AACa;;AAEvE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,sEAAU;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC,sEAAU;AAClD,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,+EAAW,EAAE;;AAE3C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE,wDAAW;;AAEb;AACA,EAAE,mEAAsB;AACxB;;AAEuE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrHzB;AACV;AAC4C;;AAEhF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,iDAAW;;AAEjB;AACA,MAAM,gEAAQ;AACd,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,mCAAmC,4BAA4B;AAC/D;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC,4DAA4D,OAAO;AACnE,wCAAwC,2BAA2B;AACnE;AACA,SAAS;AACT;AACA;AACA,IAAI;AACJ,oCAAoC,WAAW;AAC/C,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,mCAAmC;AACnC;AACA,uBAAuB,UAAU,yBAAyB;AAC1D;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;;AAEA;;AAEA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,6BAA6B,qBAAqB;AAClD;AACA,WAAW;AACX;;AAEA;AACA;AACA,kDAAkD,iBAAiB;AACnE,oCAAoC,qBAAqB,EAAE,EAAE;AAC7D;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,qFAAqB;AAClD;AACA;AACA,yCAAyC,KAAK;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,cAAc,EAAE,sBAAsB;;AAEnE;;AAEA;AACA;AACA,wCAAwC,yBAAyB;AACjE,oCAAoC,gBAAgB,EAAE,sBAAsB;AAC5E;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,qFAAqB;AAClD;AACA;AACA,yCAAyC,KAAK;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,+CAA+C,iBAAiB;AAChE,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAkBE;;;;;;;UCjdF;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNwC;;AAExC,qDAAW","sources":["webpack://battleship/./src/components/factories/gameBoardFactory.js","webpack://battleship/./src/components/factories/gameFactory.js","webpack://battleship/./src/components/factories/playerFactory.js","webpack://battleship/./src/components/factories/shipFactory.js","webpack://battleship/./src/components/gameFlow.js","webpack://battleship/./src/components/helpers/capitalizeFirstLetter.js","webpack://battleship/./src/components/helpers/handleForm.js","webpack://battleship/./src/components/helpers/retrievePlayerName.js","webpack://battleship/./src/components/initializeGame.js","webpack://battleship/./src/components/positionShips.js","webpack://battleship/./src/dom/dom.js","webpack://battleship/./src/dom/domHelpers.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["import Ship from \"./shipFactory\";\n\nfunction Gameboard() {\n  const createBoard = () => {\n    const x = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n    const y = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"];\n    let board = [];\n\n    for (let i = 0; i < x.length; i++) {\n      for (let j = 0; j < y.length; j++) {\n        board.push({\n          ID: x[i] + y[j],\n          ship: null,\n          status: null,\n          attackedBy: null,\n          sunk: false,\n        });\n      }\n    }\n\n    return board;\n  };\n\n  let boardPieces = createBoard();\n\n  const shipStorage = [\n    new Ship(\"Carrier\", 5),\n    new Ship(\"Battleship\", 4),\n    new Ship(\"Cruiser\", 3),\n    new Ship(\"Submarine\", 3),\n    new Ship(\"Destroyer\", 2),\n  ];\n\n  const setShipCoordinates = (name, inputCoordinates) => {\n    console.log(`Ship: ${name} Coordinates:${inputCoordinates}`);\n    for (const ship of shipStorage) {\n      if (ship.getShipType() === name) {\n        ship.coordinates = inputCoordinates;\n      }\n    }\n    addShipToBoardProp(name, inputCoordinates);\n  };\n\n  const addShipToBoardProp = (name, submittedCoordinates) => {\n    // loop through array of board pieces ex. [{ID: A1, ship: null}, ...]\n    // if boardPiece.ID matches inputed coordinates\n    // set boardPiece.ship property to activeShip object\n\n    const approvedBoardPieces = submittedCoordinates.map(\n      (indivdiualCoordinate) => {\n        const matchingBoardPieces = boardPieces.find((boardPiece) => {\n          return boardPiece.ID === indivdiualCoordinate;\n        });\n\n        return matchingBoardPieces;\n      }\n    );\n\n    // Sets the active ship's coordindate property to the inputed coordinates\n    const activeShip = shipStorage.find((ship) => ship.getShipType() === name);\n\n    for (const boardPiece of approvedBoardPieces) {\n      boardPiece.ship = activeShip;\n    }\n  };\n\n  const areShipsPlaced = () => {\n    return shipStorage.every((ship) => ship.placed === true);\n  };\n\n  const hitActiveShip = (shipName, inputtedCoordinates) => {\n    for (const shipObj of shipStorage) {\n      if (shipObj.getShipType() === shipName) {\n        shipObj.hit(inputtedCoordinates);\n      }\n    }\n  };\n\n  const recordOfAttack = (attacker, coordinates, hitStatus) => {\n    const attackerStorage = attacker.moves;\n    const movObj = { attackCoordinates: coordinates, DidItHit: hitStatus };\n\n    attackerStorage.push(movObj);\n  };\n\n  const receiveAttack = (coordinates, attacker) => {\n    const activeBoardPiece = boardPieces.find(\n      (boardPiece) => boardPiece.ID === coordinates\n    );\n\n    if (activeBoardPiece.status !== null) return;\n\n    if (activeBoardPiece.ship !== null) {\n      activeBoardPiece.status = \"hit\";\n      activeBoardPiece.attackedBy = attacker.getName();\n\n      let shipID = activeBoardPiece.ship.shipType;\n      hitActiveShip(shipID, coordinates);\n      recordOfAttack(attacker, coordinates, activeBoardPiece.status);\n    } else {\n      activeBoardPiece.status = \"missed\";\n      activeBoardPiece.attackedBy = attacker.getName();\n      recordOfAttack(attacker, coordinates, activeBoardPiece.status);\n    }\n  };\n\n  const setShipSunkBoardProp = () => {\n    // this function iterates through the a player's ships and updates the grid boardpieces sunk property\n    // this is used to change the colour of a sunk ship\n\n    const sunkShips = [];\n\n    for (const ship of shipStorage) {\n      if (ship.getSunkStatus() == true) {\n        sunkShips.push(ship);\n\n        // Here find the sunk ship's coordinates and update the board pieces that contain the sunk ship\n        sunkShips.forEach((sunkShip) => {\n          const approvedBoardPieces = sunkShip.coordinates.map(\n            (indivdiualCoordinate) => {\n              const matchingBoardPieces = boardPieces.find((boardPiece) => {\n                return boardPiece.ID === indivdiualCoordinate;\n              });\n\n              return matchingBoardPieces;\n            }\n          );\n\n          for (const boardPiece of approvedBoardPieces) {\n            // if the coordinate belongs to a sunk ship, we set the boardpiece's sunk property to\n            boardPiece.sunk = sunkShip.getSunkStatus();\n          }\n        });\n      }\n    }\n  };\n\n  const checkCoordinatesAvailability = (arr, data, userType) => {\n    const checkTheseGridBoxes = arr.map((indivdiualCoordinate) => {\n      const matchingBoardPieces = boardPieces.find((boardPiece) => {\n        return boardPiece.ID === indivdiualCoordinate;\n      });\n\n      return matchingBoardPieces;\n    });\n\n    const areCoordinatesAvailable = () => {\n      return checkTheseGridBoxes.every((gridBox) => gridBox.ship === null);\n    };\n\n    const testCondition = areCoordinatesAvailable();\n\n    if (userType === \"human\" && !testCondition) {\n      console.log(\"the coordinates submitted NOT are available\");\n      const shipImg = document.getElementById(data);\n      shipImg.classList.add(\"shake\");\n      shipImg.addEventListener(\"animationend\", () => {\n        shipImg.classList.remove(\"shake\");\n      });\n    }\n\n    return testCondition;\n  };\n\n  const randomShipPlacement = () => {\n    shipStorage.forEach((ship) => {\n      while (ship.coordinates.length < ship.length) {\n        let coordinatesArr = [];\n\n        const random = Math.floor(Math.random() * boardPieces.length);\n\n        const shipLength = ship.length - 1;\n        const shipStartObj = boardPieces[random];\n        const shipStart = shipStartObj.ID;\n\n        const shipStartLetterCoord = shipStart.charAt(0);\n        let shipStartnNumberCoord;\n\n        if (shipStart.length < 3) {\n          shipStartnNumberCoord = parseInt(shipStart.charAt(1));\n        } else {\n          shipStartnNumberCoord = parseInt(shipStart.substring(1, 3));\n        }\n\n        const verticalOrHorizonal = (() => {\n          let num = Math.random();\n          if (num < 0.5) {\n            return \"horizontal\";\n          } else {\n            return \"vertical\";\n          }\n        })();\n\n        if (verticalOrHorizonal === \"vertical\") {\n          ship.orientation = \"vertical\";\n          console.log(ship.orientation);\n\n          const verticalShipPlacement = (() => {\n            const boardLetters = [\n              \"A\",\n              \"B\",\n              \"C\",\n              \"D\",\n              \"E\",\n              \"F\",\n              \"G\",\n              \"H\",\n              \"I\",\n              \"J\",\n              \"K\",\n            ];\n\n            const returnIndex = boardLetters.indexOf(shipStartLetterCoord);\n            const shipEndLetter = boardLetters[returnIndex + shipLength];\n            const shipEndLetterIndex = boardLetters.indexOf(shipEndLetter);\n\n            // if the last last coorindates letter coordinate index is lessan than 10\n\n            if (shipEndLetterIndex > 0 && shipEndLetterIndex < 10) {\n              const dropCoordinates = (() => {\n                for (let i = returnIndex; i <= shipEndLetterIndex; i++) {\n                  let coordinate = `${boardLetters[i]}${shipStartnNumberCoord}`;\n                  coordinatesArr.push(coordinate);\n                }\n              })();\n\n              const areCoordinatesAvailable = checkCoordinatesAvailability(\n                coordinatesArr,\n                shipStart\n              );\n\n              if (areCoordinatesAvailable) {\n                const shipNm = ship.getShipType();\n                setShipCoordinates(shipNm, coordinatesArr);\n              } else if (!areCoordinatesAvailable) {\n                console.log(\"coordinates were NOT Available\");\n                return (coordinatesArr = []);\n              }\n            }\n          })();\n        }\n\n        if (verticalOrHorizonal === \"horizontal\") {\n          ship.orientation = \"horizontal\";\n          console.log(ship.orientation);\n\n          const horizontalShipPlacement = (() => {\n            const shipEndNum = shipStartnNumberCoord + shipLength;\n\n            if (shipStart.length === 2 && shipEndNum <= 10) {\n              const dropCoordinates = (() => {\n                for (let i = shipStartnNumberCoord; i <= shipEndNum; i++) {\n                  let coordinate = `${shipStartLetterCoord}${i}`;\n                  coordinatesArr.push(coordinate);\n                }\n              })();\n\n              const checkTheseGridBoxes = coordinatesArr.map(\n                (indivdiualCoordinate) => {\n                  const matchingBoardPieces = boardPieces.find((boardPiece) => {\n                    return boardPiece.ID === indivdiualCoordinate;\n                  });\n\n                  return matchingBoardPieces;\n                }\n              );\n\n              const areCoordinatesAvailable = (() => {\n                return checkTheseGridBoxes.every(\n                  (gridBox) => gridBox.ship === null\n                );\n              })();\n\n              if (areCoordinatesAvailable) {\n                const shipNm = ship.getShipType();\n                setShipCoordinates(shipNm, coordinatesArr);\n              } else if (!areCoordinatesAvailable) {\n                console.log(\"coordinates were NOT Available\");\n                return (coordinatesArr = []);\n              }\n            }\n          })();\n        }\n\n        console.log(\n          `${ship.getShipType()}, coordinates.length: ${\n            ship.coordinates.length\n          }`\n        );\n        console.log(ship.length);\n      }\n    });\n\n    console.log(shipStorage);\n  };\n\n  const renderBoard = (container, user, mode) => {\n    if (user === true) {\n      const grid = container.appendChild(document.createElement(\"div\"));\n      if (mode === \"position\") {\n        grid.classList.add(\"grid-position\");\n      } else {\n        grid.classList.add(\"grid\");\n      }\n\n      for (let i = 0; i < 100; i++) {\n        let cell = grid.appendChild(document.createElement(\"div\"));\n        cell.setAttribute(\"id\", `${boardPieces[i].ID}`);\n        cell.classList.add(\"grid-box\");\n        cell.dataset.info = JSON.stringify(boardPieces[i]);\n        let cellData = boardPieces[i];\n        let cellShipData = cellData.ship;\n        let cellHitData = cellData.status;\n        let cellSunkStatus = cellData.sunk;\n\n        if (cellShipData !== null) {\n          cell.classList.toggle(`${cellShipData.getShipType()}`);\n        }\n\n        if (cellSunkStatus === true) {\n          cell.classList.toggle(\"box-sunk\");\n        }\n\n        switch (cellHitData) {\n          case \"hit\":\n            // toggle a class\n            cell.classList.toggle(\"box-hit\");\n            cell.textContent = \"X\";\n            break;\n          case \"missed\":\n            // toggle a class\n            cell.classList.toggle(\"box-missed\");\n            cell.textContent = \"O\";\n            break;\n        }\n      }\n    } else {\n      const computerGrid = container.appendChild(document.createElement(\"div\"));\n      computerGrid.classList.add(\"computer-grid\");\n\n      for (let i = 0; i < boardPieces.length; i++) {\n        let compCell = computerGrid.appendChild(document.createElement(\"div\"));\n        compCell.classList.add(\"grid-box-computer\");\n        compCell.dataset.info = boardPieces[i].ID;\n        const compCellData = boardPieces[i];\n        const cellStatus = compCellData.status;\n        compCell.dataset.clicked = cellStatus;\n\n        let cellSunkStatus = compCellData.sunk;\n\n        if (cellSunkStatus == true) {\n          compCell.classList.toggle(\"box-sunk\");\n        }\n\n        switch (cellStatus) {\n          case \"hit\":\n            // toggle a class/add class\n            compCell.classList.toggle(\"box-hit\");\n            compCell.textContent = \"X\";\n            break;\n          case \"missed\":\n            compCell.classList.toggle(\"box-missed\");\n            compCell.textContent = \"O\";\n            break;\n        }\n      }\n    }\n  };\n\n  const getCompCells = () => {\n    return document.querySelectorAll(\".grid-box-computer\");\n  };\n\n  const getBoardPieces = () => {\n    return boardPieces;\n  };\n  const getShipStorage = () => {\n    return shipStorage;\n  };\n\n  const getFleetHealth = () => {\n    const ships = getShipStorage();\n\n    const carrierHealth = ships[0].getHealth();\n    const battleshipHealth = ships[1].getHealth();\n    const cruiserHealth = ships[2].getHealth();\n    const submarineHealth = ships[3].getHealth();\n    const destroyerHealth = ships[4].getHealth();\n    return {\n      carrierHealth,\n      battleshipHealth,\n      cruiserHealth,\n      submarineHealth,\n      destroyerHealth,\n    };\n  };\n\n  const areAllShipsSunk = () => {\n    const ships = getShipStorage();\n    const result = ships.map((ship) => ship.isSunk());\n    return result.every((element) => element === true);\n  };\n\n  const resetShips = () => {\n    shipStorage.forEach((ship) => {\n      ship.placed = false;\n      ship.orientation = \"horizontal\";\n      ship.coordinates = [];\n    });\n  };\n\n  const resetBoard = () => {\n    boardPieces = createBoard();\n  };\n\n  return {\n    setShipCoordinates,\n    setShipSunkBoardProp,\n    getCompCells,\n    getBoardPieces,\n    getShipStorage,\n    getFleetHealth,\n    areAllShipsSunk,\n    areShipsPlaced,\n    checkCoordinatesAvailability,\n    resetShips,\n    resetBoard,\n    randomShipPlacement,\n    receiveAttack,\n    renderBoard,\n    createBoard,\n  };\n}\n\nexport default Gameboard;\n","import {\n  updateGameDisplay,\n  retrieveClickedBox,\n  turnMsg,\n  endGame,\n} from \"../../dom/domHelpers\";\n\nfunction Game(player, playerBoard, computer, computerBoard) {\n  const playRound = () => {\n    humanTurn();\n  };\n\n  const humanTurn = async () => {\n    if (player.getTurnStatus()) {\n      const coordinates = await retrieveClickedBox();\n      computerBoard.receiveAttack(coordinates, player);\n      changeTurn(player, computer);\n      sunkShipBoardListener(playerBoard, computerBoard);\n      updateGameDisplay(player, computer);\n      isGameOver();\n      setTimeout(() => {\n        computerTurn();\n      }, 1200);\n    }\n  };\n  const computerTurn = () => {\n    if (computer.getTurnStatus()) {\n      computerPlay(player, computer);\n      changeTurn(computer, player);\n      sunkShipBoardListener(computerBoard, playerBoard);\n      updateGameDisplay(player, computer);\n      isGameOver();\n      humanTurn();\n    }\n  };\n\n  const isGameOver = () => {\n    const winMsg = \"Congrats, you beat the computer!\";\n    const lossMsg = \"Unfortunately you have lost to the computer!\";\n    if (computerBoard.areAllShipsSunk() === true) {\n      endGame(winMsg);\n      return true;\n    }\n    if (playerBoard.areAllShipsSunk() === true) {\n      endGame(lossMsg);\n      return true;\n    }\n    console.log(\"the game is not over\");\n    return false;\n  };\n\n  const changeTurn = (player1, player2) => {\n    player1.changeTurn();\n    player2.changeTurn();\n    console.log(`${player1.getName()}: ${player1.getTurnStatus()}`);\n    console.log(`${player2.getName()}: ${player2.getTurnStatus()}`);\n  };\n\n  const sunkShipBoardListener = (player1Board, player2Board) => {\n    player1Board.setShipSunkBoardProp();\n    player2Board.setShipSunkBoardProp();\n  };\n\n  const computerPlay = (humanPlayer, computer) => {\n    const humanBoardObj = humanPlayer.board;\n    const humanBoardAccess = humanBoardObj.getBoardPieces();\n\n    const eligibleBoard = humanBoardAccess.filter(\n      (boardPiece) => boardPiece.status === null\n    );\n\n    const computerAttack = (coordinates) => {\n      humanBoardObj.receiveAttack(coordinates, computer);\n    };\n\n    const generateRandomCoord = (() => {\n      const randomBoardPiece =\n        eligibleBoard[Math.floor(Math.random() * eligibleBoard.length)];\n      const randomBoardPiecesCoord = randomBoardPiece.ID;\n      computerAttack(randomBoardPiecesCoord);\n    })();\n  };\n\n  return { playRound };\n}\n\nexport default Game;\n","import Gameboard from \"./gameBoardFactory\";\n\nfunction PlayerFactory(name, checkTurn) {\n  let board = new Gameboard();\n  let turn = checkTurn;\n  let moves = [];\n  let fleetHealth = board.getFleetHealth();\n\n  const getName = () => {\n    return name;\n  };\n\n  const getPlayerBoard = () => {\n    return board;\n  };\n\n  const getTurnStatus = () => {\n    return turn;\n  };\n\n  const changeTurn = () => {\n    turn = !turn;\n  };\n\n  const getAttackCoord = () => {\n    if (!moves.length) return;\n\n    let output = [];\n    for (let move of moves) {\n      output.push(move.attackCoordinates);\n    }\n    return output;\n  };\n\n  const getMoves = () => {\n    return moves;\n  };\n\n  return {\n    turn,\n    moves,\n    fleetHealth,\n    board,\n    changeTurn,\n    getName,\n    getTurnStatus,\n    getPlayerBoard,\n    getAttackCoord,\n    getMoves,\n  };\n}\n\nexport default PlayerFactory;\n","function Ship(name, length, coordinates = []) {\n  const shipType = name;\n  let health = length;\n  const hitMarkers = [];\n  let sunk = false;\n  let placed = false;\n  let orientation = \"horizontal\";\n\n  const hit = () => {\n    if (health >= 1) {\n      health--;\n      hitMarkers.push(\"hit\");\n    }\n  };\n\n  const isSunk = () => {\n    if (health === 0) {\n      sunk = true;\n      return true;\n    }\n    return false;\n  };\n\n  const changeOrientation = () => {\n    if (orientation === \"horizontal\") {\n      return (orientation = \"vertical\");\n    }\n    return (orientation = \"horizontal\");\n  };\n\n  const getShipCoordinates = () => {\n    return coordinates;\n  };\n\n  const getHealth = () => {\n    return health;\n  };\n  const getHitmarkers = () => {\n    return hitMarkers;\n  };\n\n  const getSunkStatus = () => {\n    return sunk;\n  };\n\n  const getShipType = () => {\n    return shipType;\n  };\n\n  const getIsShipPlaced = () => {\n    return placed;\n  };\n\n  const getOrientation = () => {\n    return orientation;\n  };\n  return {\n    shipType,\n    length,\n    coordinates,\n    sunk,\n    orientation,\n    placed,\n    hit,\n    isSunk,\n    changeOrientation,\n    getShipCoordinates,\n    getHealth,\n    getHitmarkers,\n    getSunkStatus,\n    getShipType,\n    getIsShipPlaced,\n    getOrientation,\n  };\n}\n\nexport default Ship;\n","import Game from \"./factories/gameFactory\";\nimport { turnMsg } from \"../dom/domHelpers\";\n\nconst gameFlow = async (player, computer) => {\n  const playerBoard = player.getPlayerBoard();\n  const computerBoard = computer.getPlayerBoard();\n\n  const playerBoardSunkStatus = playerBoard.areAllShipsSunk();\n  const computerBoardSunkStatus = computerBoard.areAllShipsSunk();\n\n  const game = new Game(player, playerBoard, computer, computerBoard);\n\n  game.playRound();\n};\n\nexport default gameFlow;\n","function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nexport default capitalizeFirstLetter;\n","import { removeContent } from \"../../dom/domHelpers\";\nimport { retrievePlayerName } from \"./retrievePlayerName\";\nimport initializeGame from \"../initializeGame\";\n\nconst handleForm = (e) => {\n  e.preventDefault();\n  retrievePlayerName();\n  const homeDisplayContainer = document.querySelector(\".home-display\");\n  removeContent(homeDisplayContainer);\n  initializeGame();\n};\n\nexport default handleForm;\n","let nameStorage;\n\nconst retrievePlayerName = () => {\n  let playerName = document.getElementById(\"player-input\").value;\n  nameStorage = playerName;\n\n  if (playerName === \"\") {\n    console.log(\"You did not enter a value.\");\n  }\n  console.log(playerName);\n  return playerName;\n};\n\nexport { retrievePlayerName, nameStorage };\n","import PlayerFactory from \"./factories/playerFactory\";\nimport { nameStorage } from \"./helpers/retrievePlayerName\";\nimport positionShips from \"./positionShips\";\nimport { positionShipDisplay } from \"../dom/dom\";\n\nconst initializeGame = () => {\n  const player = new PlayerFactory(nameStorage, true);\n  const computer = new PlayerFactory(\"AI\", false);\n  const computerBoard = computer.getPlayerBoard();\n  computerBoard.randomShipPlacement();\n\n  positionShipDisplay(nameStorage);\n  positionShips(player, computer);\n};\n\nexport default initializeGame;\n","import {\n  dragAndDropDisplay,\n  dragAndDropLogic,\n  autoPlacementListener,\n} from \"../dom/domHelpers\";\n\nconst positionShips = (player, computer) => {\n  const playerBoard = player.getPlayerBoard();\n  const positionShipContainer = document.querySelector(\".grid-container\");\n  playerBoard.renderBoard(positionShipContainer, true, \"position\");\n\n  const dragAndDrop = (() => {\n    dragAndDropDisplay(player);\n    dragAndDropLogic(player, computer);\n  })();\n\n  autoPlacementListener(player, computer);\n};\n\nexport default positionShips;\n","import { displayFleetsAndBoards, turnDisplay } from \"./domHelpers\";\nimport handleForm from \"../components/helpers/handleForm\";\nimport { nameStorage } from \"../components/helpers/retrievePlayerName\";\n\nconst createHeader = () => {\n  const headerContainer = document.body.appendChild(\n    document.createElement(\"nav\")\n  );\n  headerContainer.classList.add(\"header-container-game\");\n\n  const headerLogo = headerContainer.appendChild(document.createElement(\"img\"));\n  headerLogo.classList.add(\"header-logo-game\");\n  headerLogo.src = \"/src/styles/images/Battleship-1.png\";\n};\n\nconst homeDisplay = () => {\n  const createHome = document.body.appendChild(document.createElement(\"div\"));\n  createHome.classList.add(\"home-display\");\n\n  const addToHomeDisplay = document.querySelector(\".home-display\");\n\n  const headerContainer = addToHomeDisplay.appendChild(\n    document.createElement(\"nav\")\n  );\n  headerContainer.classList.add(\"navbar\");\n\n  const headerLogo = headerContainer.appendChild(document.createElement(\"img\"));\n  headerLogo.classList.add(\"header-logo\");\n  headerLogo.src = \"/src/styles/images/Battleship-1.png\";\n\n  const homeContainer = addToHomeDisplay.appendChild(\n    document.createElement(\"section\")\n  );\n  homeContainer.classList.add(\"home-container\");\n\n  const createEnterNameInput = (() => {\n    const enterNameContainer = homeContainer.appendChild(\n      document.createElement(\"div\")\n    );\n    enterNameContainer.classList.add(\"enter-name-container\");\n\n    const form = enterNameContainer.appendChild(document.createElement(\"form\"));\n    form.classList.add(\"form\");\n    form.addEventListener(\"submit\", handleForm);\n\n    const input = form.appendChild(document.createElement(\"input\"));\n    input.classList.add(\"input\");\n    input.placeholder = \"PLAYER NAME\";\n    input.setAttribute(\"id\", \"player-input\");\n    input.setAttribute(\"name\", \"player-input\");\n    input.setAttribute(\"type\", \"text\");\n    input.required = true;\n\n    const startBtn = form.appendChild(document.createElement(\"button\"));\n    startBtn.textContent = \"Start Game\";\n    startBtn.classList.add(\"start-btn\");\n    startBtn.setAttribute(\"type\", \"submit\");\n    startBtn.addEventListener(\"submit\", handleForm);\n  })();\n};\n\nconst positionShipDisplay = () => {\n  createHeader();\n\n  const placeShip = document.body.appendChild(document.createElement(\"div\"));\n  placeShip.classList.add(\"place-ship-container\");\n\n  const headerContainer = placeShip.appendChild(\n    document.createElement(\"header\")\n  );\n  headerContainer.classList.add(\"place-ship-header\");\n\n  const headerText = headerContainer.appendChild(document.createElement(\"h1\"));\n  headerText.textContent = `${nameStorage} place your ships!`;\n\n  const placeShipContent = placeShip.appendChild(\n    document.createElement(\"main\")\n  );\n  placeShipContent.classList.add(\"place-ship\");\n\n  const gridContainer = placeShipContent.appendChild(\n    document.createElement(\"section\")\n  );\n\n  gridContainer.classList.add(\"grid-container\");\n\n  const btnContainer = placeShipContent.appendChild(\n    document.createElement(\"div\")\n  );\n\n  btnContainer.classList.add(\"btn-container\");\n\n  const autoPlacement = btnContainer.appendChild(\n    document.createElement(\"button\")\n  );\n\n  autoPlacement.classList.add(\"auto-place\");\n  autoPlacement.textContent = \"Auto Placement\";\n};\n\nconst gameDisplay = (player, computer) => {\n  const turnContainer = document.body.appendChild(\n    document.createElement(\"div\")\n  );\n  turnContainer.classList.add(\"turn-container\");\n  const gameContainer = document.body.appendChild(\n    document.createElement(\"div\")\n  );\n  gameContainer.classList.add(\"game-container\");\n\n  // Display who's turn it is\n  turnDisplay(player, computer);\n\n  // Renders Player and Computer's gameboard and fleet\n  displayFleetsAndBoards(player, computer);\n};\n\nexport { createHeader, homeDisplay, positionShipDisplay, gameDisplay };\n","import gameFlow from \"../components/gameFlow\";\nimport { gameDisplay } from \"./dom\";\nimport capitalizeFirstLetter from \"../components/helpers/capitalizeFirstLetter\";\n\nconst startGameListener = (player, computer) => {\n  // assigning event listener to start game\n  const placeShipDisplay = document.querySelector(\".place-ship-container\");\n  const startGameBtn = document.querySelector(\".ready-btn\");\n\n  if (startGameBtn) {\n    startGameBtn.addEventListener(\"click\", function () {\n      // removes position display and repopulates with game display\n      removeContent(placeShipDisplay);\n      gameDisplay(player, computer);\n\n      // starts game flow\n      gameFlow(player, computer);\n    });\n  }\n};\n\nconst autoPlacementListener = (player, computer) => {\n  const playerBoard = player.getPlayerBoard();\n  const autoPlacementBtn = document.querySelector(\".auto-place\");\n  const dragAndDrop = document.querySelector(\".list-container\");\n  const btnContainer = document.querySelector(\".btn-container\");\n\n  let startGameFlag = false;\n\n  autoPlacementBtn.addEventListener(\"click\", () => {\n    playerBoard.resetShips();\n    playerBoard.resetBoard();\n    playerBoard.randomShipPlacement();\n    updateGridOnPlacement(playerBoard);\n\n    if (!startGameFlag) {\n      const startGameBtn = btnContainer.appendChild(\n        document.createElement(\"button\")\n      );\n\n      startGameBtn.classList.add(\"ready-btn\");\n      startGameBtn.textContent = \"Start Game\";\n      startGameFlag = true;\n      startGameListener(player, computer);\n    }\n\n    if (dragAndDrop) {\n      dragAndDrop.remove();\n    }\n  });\n};\n\nconst createListOfShips = (container, player) => {\n  const listContainer = container.appendChild(document.createElement(\"div\"));\n  listContainer.classList.add(\"list-container\");\n  const shipListHeader = listContainer.appendChild(\n    document.createElement(\"h2\")\n  );\n\n  const listOfShips = listContainer.appendChild(document.createElement(\"ul\"));\n  listOfShips.classList.add(\"ships-list\");\n\n  const playerName = player.getName();\n  const playerBoard = player.getPlayerBoard();\n  const fleetInfo = playerBoard.getShipStorage();\n\n  if (playerName === \"AI\") {\n    shipListHeader.textContent = \"Computer's Fleet\";\n    for (let i = 0; i < 5; i++) {\n      const shipDisplay = document.createElement(\"li\");\n      listOfShips.appendChild(shipDisplay);\n      shipDisplay.classList.add(\"individual-ships\");\n      shipDisplay.textContent = `${fleetInfo[i].getShipType()} (${\n        fleetInfo[i].length\n      })`;\n      shipDisplay.setAttribute(\"id\", \"ship\" + [i + 6]);\n      if (fleetInfo[i].isSunk()) {\n        // let sunkShip = fleetInfo[i];\n        let sunkId = [i + 6];\n        const editShipDisplay = (() => {\n          let stringId = `ship${sunkId}`;\n          let editThisShip = document.getElementById(`ship${sunkId}`);\n          editThisShip.textContent = `${fleetInfo[i].getShipType()}'s sunk!`;\n          editThisShip.classList.toggle(\"sunk-ship-list\");\n        })();\n      }\n    }\n  } else {\n    shipListHeader.textContent = `${playerName}'s Fleet`;\n    for (let i = 0; i < 5; i++) {\n      const shipDisplay = document.createElement(\"li\");\n      listOfShips.appendChild(shipDisplay);\n      shipDisplay.classList.add(\"individual-ships\");\n      shipDisplay.textContent = `${fleetInfo[\n        i\n      ].getShipType()} Health: ${fleetInfo[i].getHealth()}/${\n        fleetInfo[i].length\n      }`;\n      shipDisplay.setAttribute(\"id\", \"ship\" + [i + 1]);\n    }\n  }\n};\n\nconst rotateShip = (playerBoard, img) => {\n  const fleetInfo = playerBoard.getShipStorage();\n\n  const matchingShip = fleetInfo.find(\n    (ship) => ship.getShipType().toLowerCase() === img.id\n  );\n\n  const currentOrientation = matchingShip.getOrientation();\n\n  if (currentOrientation === \"vertical\") {\n    img.style.transform = \"rotate(90deg)\";\n  }\n\n  if (currentOrientation === \"horizontal\") {\n    img.style.transform = \"rotate(0)\";\n  }\n};\n\nconst dragAndDropDisplay = (player) => {\n  const placeShipContent = document.querySelector(\".place-ship\");\n  const listContainer = placeShipContent.appendChild(\n    document.createElement(\"div\")\n  );\n  listContainer.classList.add(\"list-container\");\n\n  const shipListHeader = listContainer.appendChild(\n    document.createElement(\"h2\")\n  );\n\n  const playerBoard = player.getPlayerBoard();\n  const fleetInfo = playerBoard.getShipStorage();\n\n  shipListHeader.textContent = `Drag'n Drop`;\n\n  const displayOfShipIcons = (() => {\n    const listOfShips = listContainer.appendChild(document.createElement(\"ul\"));\n    listOfShips.classList.add(\"ships-list\");\n    for (let i = 0; i < 5; i++) {\n      const shipDisplay = listOfShips.appendChild(document.createElement(\"li\"));\n      shipDisplay.classList.add(\"ship-list-item\");\n\n      const shipName = fleetInfo[i].getShipType().toLowerCase();\n\n      const shipImg = shipDisplay.appendChild(document.createElement(\"img\"));\n      shipImg.src = `/src/styles/images/ships/${shipName}.png`;\n      shipImg.classList.add(\"ship-img\");\n      shipImg.setAttribute(\"id\", shipName);\n      shipImg.addEventListener(\"dragstart\", (e) => {\n        e.dataTransfer.setData(\"text/plain\", e.target.id);\n      });\n      shipImg.addEventListener(\"dblclick\", () => {\n        const matchingShip = fleetInfo.find(\n          (ship) => ship.getShipType().toLowerCase() === shipImg.id\n        );\n        matchingShip.changeOrientation();\n        console.log(matchingShip.getOrientation());\n        rotateShip(playerBoard, shipImg);\n      });\n    }\n  })();\n};\n\nconst dragAndDropLogic = (player, computer) => {\n  const playerBoard = player.getPlayerBoard();\n  const gridBoxes = document.querySelectorAll(\".grid-box\");\n  const fleetInfo = playerBoard.getShipStorage();\n  const btnContainer = document.querySelector(\".btn-container\");\n\n  gridBoxes.forEach((box) => {\n    box.addEventListener(\"dragover\", (e) => {\n      e.preventDefault();\n      box.classList.add(\"over\");\n    });\n\n    box.addEventListener(\"dragleave\", () => {\n      box.classList.remove(\"over\");\n    });\n\n    box.addEventListener(\"drop\", (e) => {\n      e.preventDefault();\n\n      box.classList.remove(\"over\");\n\n      const listContainer = document.querySelector(\".list-container\");\n\n      const data = e.dataTransfer.getData(\"text\");\n\n      const matchingShip = fleetInfo.find(\n        (ship) => ship.getShipType().toLowerCase() === data\n      );\n      const shipLength = matchingShip.length - 1;\n      const shipStart = box.id;\n\n      const shipStartLetterCoord = shipStart.charAt(0);\n      let shipStartnNumberCoord;\n\n      if (shipStart.length < 3) {\n        shipStartnNumberCoord = parseInt(shipStart.charAt(1));\n      } else {\n        shipStartnNumberCoord = parseInt(shipStart.substring(1, 3));\n      }\n\n      console.log(shipStartnNumberCoord);\n\n      const coordinatesArr = [];\n\n      if (matchingShip.getOrientation() === \"horizontal\") {\n        const horizontalShipPlacement = (() => {\n          const shipEnd = `${shipStartLetterCoord}${\n            shipStartnNumberCoord + shipLength\n          }`;\n          const shipEndNum = shipStartnNumberCoord + shipLength;\n\n          if (shipStart.length === 2 && shipEndNum <= 10) {\n            const dropCoordinates = (() => {\n              for (let i = shipStartnNumberCoord; i <= shipEndNum; i++) {\n                let coordinate = `${shipStartLetterCoord}${i}`;\n                coordinatesArr.push(coordinate);\n              }\n            })();\n\n            const areCoordinatesAvailable =\n              playerBoard.checkCoordinatesAvailability(\n                coordinatesArr,\n                data,\n                \"human\"\n              );\n\n            if (areCoordinatesAvailable) {\n              console.log(\"the coordinates submitted are available\");\n              const shipNm = capitalizeFirstLetter(data);\n              playerBoard.setShipCoordinates(shipNm, coordinatesArr);\n              matchingShip.placed = true;\n              document.querySelector(`#${data}`).remove();\n              updateGridOnDrop(player, computer);\n              const doneDroppingShips = playerBoard.areShipsPlaced();\n\n              if (doneDroppingShips) {\n                console.log(\"ships are all placed\");\n                const startGameBtn = btnContainer.appendChild(\n                  document.createElement(\"button\")\n                );\n\n                startGameBtn.classList.add(\"ready-btn\");\n                startGameBtn.textContent = \"Start Game\";\n                startGameListener(player, computer);\n                listContainer.remove();\n              }\n            }\n          } else {\n            const shipImg = document.getElementById(data);\n            shipImg.classList.add(\"shake\");\n            shipImg.addEventListener(\"animationend\", () => {\n              shipImg.classList.remove(\"shake\");\n            });\n          }\n        })();\n      }\n\n      if (matchingShip.getOrientation() === \"vertical\") {\n        const verticalShipPlacement = (() => {\n          const boardLetters = [\n            \"A\",\n            \"B\",\n            \"C\",\n            \"D\",\n            \"E\",\n            \"F\",\n            \"G\",\n            \"H\",\n            \"I\",\n            \"J\",\n            \"K\",\n          ];\n\n          const returnIndex = boardLetters.indexOf(shipStartLetterCoord);\n          const shipEndLetter = boardLetters[returnIndex + shipLength];\n          const shipEndLetterIndex = boardLetters.indexOf(shipEndLetter);\n          const shipEnd = `${shipEndLetter}${shipStartnNumberCoord}`;\n\n          // if the last last coorindates letter coordinate index is lessan than 10\n\n          if (shipEndLetterIndex > 0 && shipEndLetterIndex < 10) {\n            const dropCoordinates = (() => {\n              for (let i = returnIndex; i <= shipEndLetterIndex; i++) {\n                let coordinate = `${boardLetters[i]}${shipStartnNumberCoord}`;\n                coordinatesArr.push(coordinate);\n              }\n            })();\n\n            const areCoordinatesAvailable =\n              playerBoard.checkCoordinatesAvailability(\n                coordinatesArr,\n                data,\n                \"human\"\n              );\n\n            if (areCoordinatesAvailable) {\n              const shipNm = capitalizeFirstLetter(data);\n              playerBoard.setShipCoordinates(shipNm, coordinatesArr);\n              matchingShip.placed = true;\n              document.querySelector(`#${data}`).remove();\n              updateGridOnDrop(playerBoard, computer);\n\n              const doneDroppingShips = playerBoard.areShipsPlaced();\n              console.log(doneDroppingShips);\n              console.log(playerBoard.getShipStorage());\n\n              if (doneDroppingShips) {\n                console.log(\"ships are all placed\");\n                const startGameBtn = btnContainer.appendChild(\n                  document.createElement(\"button\")\n                );\n\n                startGameBtn.classList.add(\"ready-btn\");\n                startGameBtn.textContent = \"Start Game\";\n                startGameListener(player, computer);\n                listContainer.remove();\n              }\n            }\n          } else {\n            const shipImg = document.getElementById(data);\n            shipImg.classList.add(\"shake\");\n            shipImg.addEventListener(\"animationend\", () => {\n              shipImg.classList.remove(\"shake\");\n            });\n          }\n        })();\n      }\n    });\n  });\n};\n\nconst updateGridOnDrop = (player, computer) => {\n  const playerBoard = player.getPlayerBoard();\n  const positionShipContainer = document.querySelector(\".grid-container\");\n  positionShipContainer.firstChild.remove();\n\n  playerBoard.renderBoard(positionShipContainer, true, \"position\");\n  dragAndDropLogic(player, computer);\n};\n\nconst updateGridOnPlacement = (playerBoard) => {\n  const positionShipContainer = document.querySelector(\".grid-container\");\n  positionShipContainer.firstChild.remove();\n\n  playerBoard.renderBoard(positionShipContainer, true, \"position\");\n  console.log(playerBoard.getBoardPieces());\n};\n\nconst displayFleetsAndBoards = (player, computer) => {\n  const gameContainer = document.querySelector(\".game-container\");\n\n  while (gameContainer.hasChildNodes()) {\n    gameContainer.firstChild.remove();\n  }\n\n  const leftGame = gameContainer.appendChild(document.createElement(\"div\"));\n  leftGame.classList.add(\"left-game\");\n  const playerFleetDisplay = createListOfShips(leftGame, player);\n  const playerBoard = player.getPlayerBoard();\n  playerBoard.renderBoard(leftGame, true);\n\n  const rightGame = gameContainer.appendChild(document.createElement(\"div\"));\n  rightGame.classList.add(\"right-game\");\n  const computerBoard = computer.getPlayerBoard();\n  computerBoard.renderBoard(rightGame);\n  const computerFleetDisplay = createListOfShips(rightGame, computer);\n};\n\nconst retrieveClickedBox = () => {\n  return new Promise((resolve) => {\n    let computerCells = document.querySelectorAll(\".grid-box-computer\");\n    computerCells.forEach((cell) => {\n      if (cell.dataset.clicked === \"null\") {\n        cell.addEventListener(\"click\", function handleClick(e) {\n          console.log(e.target.dataset);\n          resolve(e.target.dataset.info);\n        });\n      }\n    });\n  });\n};\n\nconst endGame = (msg) => {\n  turnMsg(msg);\n  let computerCells = document.querySelectorAll(\".grid-box-computer\");\n  computerCells.forEach((cell) => {\n    cell.removeEventListener(\"click\", handleClick);\n  });\n};\n\nconst displaySunkShips = (playerBoard, computerBoard) => {\n  const playerFleet = playerBoard.getFleetHealth();\n  const compFleet = computerBoard.getFleetHealth();\n\n  const playerBoardPieces = playerBoard.getBoardPieces();\n  const compBoardPieces = computerBoard.getBoardPieces();\n\n  playerFleet.map((ship) => {\n    if (ship === 0) {\n    }\n  });\n\n  const sunkPlayer = [];\n  const sunkComp = [];\n};\n\nconst turnDisplay = (player, computer) => {\n  const container = document.querySelector(\".turn-container\");\n\n  while (container.hasChildNodes()) {\n    container.firstChild.remove();\n  }\n\n  const turnTitle = container.appendChild(document.createElement(\"h2\"));\n  turnTitle.classList.add(\"turn-title\");\n\n  const playerTurn = player.getTurnStatus();\n  const computerTurn = computer.getTurnStatus();\n\n  if (playerTurn === true) {\n    turnTitle.textContent = `It's  your turn ${player.getName()}, attack the computer's board!`;\n  } else if (computerTurn === true) {\n    turnTitle.textContent = `It's the computer's turn, brace for impact!`;\n  }\n};\n\nconst turnMsg = (string) => {\n  const turnText = document.querySelector(\".turn-title\");\n  turnText.textContent = string;\n};\n\nconst updateGameDisplay = (player, computer) => {\n  turnDisplay(player, computer);\n  displayFleetsAndBoards(player, computer);\n};\n\nconst pageTranstion = (content) => {\n  removeContent(content);\n};\n\nconst removeContent = (content) => {\n  content.remove();\n};\n\nexport {\n  dragAndDropDisplay,\n  dragAndDropLogic,\n  updateGridOnDrop,\n  updateGridOnPlacement,\n  startGameListener,\n  autoPlacementListener,\n  updateGameDisplay,\n  turnDisplay,\n  turnMsg,\n  displayFleetsAndBoards,\n  retrieveClickedBox,\n  createListOfShips,\n  pageTranstion,\n  removeContent,\n  endGame,\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { homeDisplay } from \"./dom/dom\";\n\nhomeDisplay();\n"],"names":[],"sourceRoot":""}